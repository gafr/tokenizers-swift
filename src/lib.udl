namespace tokenizers {
  // UniFFI doesn't support associated function, so we have to define them as
  // top-level functions.
  [Throws=TokenizersError]
  RustBPEReadFileReturn models_bpe_bpe_read_file([ByRef] string vocab, [ByRef] string merges);
};

[Error]
enum TokenizersError {
  "Tokenizer",
  "ValueError",
  "Exception",
};

interface RustTokenizer {
  [Name=from_pretrained, Throws=TokenizersError]
  constructor(
    [ByRef] string identifier,
    string revision,
    string? auth_token);

  [Throws=TokenizersError]
  RustEncoding encode([ByRef] string input, boolean add_special_tokens);
};

interface RustEncoding {
  sequence<string> get_tokens();
};

// Models
[Custom]
typedef sequence<sequence<string>> RustMerges;

dictionary RustBPEReadFileReturn {
  record<string, u32> vocab;
  RustMerges merges;
};

interface RustBPE {
  [Throws=TokenizersError]
  constructor(
    record<string, u32>? vocab,
    RustMerges? merges,
    string? vocab_file,
    string? merges_file,
    u32? cache_capacity,
    float? dropout,
    string? unk_token,
    string? continuing_subword_prefix,
    string? end_of_word_suffix,
    boolean? fuse_unk
  );

  string? get_unk_token();
};